-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | STUB
--   
--   <tt>otel-api-context</tt> STUB
@package otel-api-context
@version 0.0.0

module OTel.API.Context.Internal
newtype ContextT c m a
ContextT :: (ContextBackend c -> m a) -> ContextT c m a
[runContextT] :: ContextT c m a -> ContextBackend c -> m a
mapContextT :: forall m n c a b. (m a -> n b) -> ContextT c m a -> ContextT c n b
attachContextValue :: forall m a b. (MonadIO m, MonadMask m) => a -> ContextT a m b -> ContextT a m b
getAttachedContextValue :: forall m a. (MonadIO m, MonadMask m) => ContextT a m (Maybe a)
getAttachedContext :: forall m a. (MonadIO m, MonadThrow m) => ContextT a m Context
instance (GHC.Base.Applicative m, GHC.Base.Monoid a) => GHC.Base.Monoid (OTel.API.Context.Internal.ContextT c m a)
instance (GHC.Base.Applicative m, GHC.Base.Semigroup a) => GHC.Base.Semigroup (OTel.API.Context.Internal.ContextT c m a)
instance Control.Monad.Trans.Control.MonadTransControl (OTel.API.Context.Internal.ContextT c)
instance Control.Monad.Trans.Resource.Internal.MonadResource m => Control.Monad.Trans.Resource.Internal.MonadResource (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Logger.MonadLogger m => Control.Monad.Logger.MonadLogger (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Trans.Control.MonadBaseControl b m => Control.Monad.Trans.Control.MonadBaseControl b (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Base.MonadBase b m => Control.Monad.Base.MonadBase b (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.IO.Unlift.MonadUnliftIO m => Control.Monad.IO.Unlift.MonadUnliftIO (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Catch.MonadThrow m => Control.Monad.Catch.MonadThrow (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Catch.MonadMask m => Control.Monad.Catch.MonadMask (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Catch.MonadCatch m => Control.Monad.Catch.MonadCatch (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Select.MonadSelect r m => Control.Monad.Select.MonadSelect r (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Accum.MonadAccum w m => Control.Monad.Accum.MonadAccum w (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Writer.Class.MonadWriter w m => Control.Monad.Writer.Class.MonadWriter w (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Error.Class.MonadError e m => Control.Monad.Error.Class.MonadError e (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Cont.Class.MonadCont m => Control.Monad.Cont.Class.MonadCont (OTel.API.Context.Internal.ContextT c m)
instance GHC.Base.MonadPlus m => GHC.Base.MonadPlus (OTel.API.Context.Internal.ContextT c m)
instance GHC.Base.Alternative m => GHC.Base.Alternative (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Fail.MonadFail m => Control.Monad.Fail.MonadFail (OTel.API.Context.Internal.ContextT c m)
instance GHC.Base.Monad m => GHC.Base.Monad (OTel.API.Context.Internal.ContextT c m)
instance GHC.Base.Functor m => GHC.Base.Functor (OTel.API.Context.Internal.ContextT c m)
instance GHC.Base.Applicative m => GHC.Base.Applicative (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.Trans.Class.MonadTrans (OTel.API.Context.Internal.ContextT c)
instance Control.Monad.Reader.Class.MonadReader r m => Control.Monad.Reader.Class.MonadReader r (OTel.API.Context.Internal.ContextT c m)
instance Control.Monad.RWS.Class.MonadRWS r w s m => Control.Monad.RWS.Class.MonadRWS r w s (OTel.API.Context.Internal.ContextT c m)

module OTel.API.Context
newtype ContextT c m a
ContextT :: (ContextBackend c -> m a) -> ContextT c m a
[runContextT] :: ContextT c m a -> ContextBackend c -> m a
mapContextT :: forall m n c a b. (m a -> n b) -> ContextT c m a -> ContextT c n b
attachContextValue :: forall m a b. (MonadIO m, MonadMask m) => a -> ContextT a m b -> ContextT a m b
getAttachedContextValue :: forall m a. (MonadIO m, MonadMask m) => ContextT a m (Maybe a)
getAttachedContext :: forall m a. (MonadIO m, MonadThrow m) => ContextT a m Context
