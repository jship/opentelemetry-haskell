-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | STUB
--   
--   <tt>otel-sdk-trace</tt> STUB
@package otel-sdk-trace
@version 0.0.0

module OTel.SDK.Trace.Internal
data TracerProviderSpec
TracerProviderSpec :: IO Timestamp -> Logger -> Seed -> (forall a. Logger -> (IdGeneratorSpec -> IO a) -> IO a) -> (forall a. [Logger -> (SpanProcessorSpec -> IO a) -> IO a]) -> (forall a. Logger -> (SamplerSpec -> IO a) -> IO a) -> Resource Attrs -> AttrsLimits 'AttrsForSpan -> AttrsLimits 'AttrsForSpanEvent -> AttrsLimits 'AttrsForSpanLink -> (CallStack -> AttrsBuilder 'AttrsForSpan) -> (SpanContext -> [Pair]) -> TracerProviderSpec
[tracerProviderSpecNow] :: TracerProviderSpec -> IO Timestamp
[tracerProviderSpecLogger] :: TracerProviderSpec -> Logger
[tracerProviderSpecSeed] :: TracerProviderSpec -> Seed
[tracerProviderSpecIdGenerator] :: TracerProviderSpec -> forall a. Logger -> (IdGeneratorSpec -> IO a) -> IO a
[tracerProviderSpecSpanProcessors] :: TracerProviderSpec -> forall a. [Logger -> (SpanProcessorSpec -> IO a) -> IO a]
[tracerProviderSpecSampler] :: TracerProviderSpec -> forall a. Logger -> (SamplerSpec -> IO a) -> IO a
[tracerProviderSpecResource] :: TracerProviderSpec -> Resource Attrs
[tracerProviderSpecSpanAttrsLimits] :: TracerProviderSpec -> AttrsLimits 'AttrsForSpan
[tracerProviderSpecSpanEventAttrsLimits] :: TracerProviderSpec -> AttrsLimits 'AttrsForSpanEvent
[tracerProviderSpecSpanLinkAttrsLimits] :: TracerProviderSpec -> AttrsLimits 'AttrsForSpanLink
[tracerProviderSpecCallStackAttrs] :: TracerProviderSpec -> CallStack -> AttrsBuilder 'AttrsForSpan
[tracerProviderSpecSpanContextMeta] :: TracerProviderSpec -> SpanContext -> [Pair]
defaultTracerProviderSpec :: TracerProviderSpec
withTracerProvider :: forall m a. MonadUnliftIO m => TracerProviderSpec -> (TracerProvider -> m a) -> m a
withTracerProviderIO :: forall a. TracerProviderSpec -> (TracerProvider -> IO a) -> IO a
data SpanProcessor
SpanProcessor :: (Context -> (UpdateSpanSpec -> IO (Span Attrs)) -> IO ()) -> (Span Attrs -> IO ()) -> IO () -> IO () -> SpanProcessor
[spanProcessorOnSpanStart] :: SpanProcessor -> Context -> (UpdateSpanSpec -> IO (Span Attrs)) -> IO ()
[spanProcessorOnSpanEnd] :: SpanProcessor -> Span Attrs -> IO ()
[spanProcessorShutdown] :: SpanProcessor -> IO ()
[spanProcessorForceFlush] :: SpanProcessor -> IO ()
buildSpanProcessor :: forall a. Resource Attrs -> Logger -> SpanProcessorSpec -> (SpanProcessor -> IO a) -> IO a
data SimpleSpanProcessorSpec
SimpleSpanProcessorSpec :: Text -> (forall a. Logger -> (SpanExporterSpec -> IO a) -> IO a) -> OnSpansExported () -> SimpleSpanProcessorSpec
[simpleSpanProcessorSpecName] :: SimpleSpanProcessorSpec -> Text
[simpleSpanProcessorSpecExporter] :: SimpleSpanProcessorSpec -> forall a. Logger -> (SpanExporterSpec -> IO a) -> IO a
[simpleSpanProcessorSpecOnSpansExported] :: SimpleSpanProcessorSpec -> OnSpansExported ()
defaultSimpleSpanProcessorSpec :: SimpleSpanProcessorSpec
simpleSpanProcessor :: forall a. SimpleSpanProcessorSpec -> Logger -> (SpanProcessorSpec -> IO a) -> IO a
data SpanProcessorSpec
SpanProcessorSpec :: Text -> (forall a. Logger -> (SpanExporterSpec -> IO a) -> IO a) -> (Context -> (UpdateSpanSpec -> SpanProcessorM (Span Attrs)) -> SpanProcessorM ()) -> (Span Attrs -> SpanProcessorM ()) -> SpanProcessorM () -> Int -> SpanProcessorM () -> Int -> OnTimeout () -> OnException () -> SpanProcessorSpec
[spanProcessorSpecName] :: SpanProcessorSpec -> Text
[spanProcessorSpecExporter] :: SpanProcessorSpec -> forall a. Logger -> (SpanExporterSpec -> IO a) -> IO a
[spanProcessorSpecOnSpanStart] :: SpanProcessorSpec -> Context -> (UpdateSpanSpec -> SpanProcessorM (Span Attrs)) -> SpanProcessorM ()
[spanProcessorSpecOnSpanEnd] :: SpanProcessorSpec -> Span Attrs -> SpanProcessorM ()
[spanProcessorSpecShutdown] :: SpanProcessorSpec -> SpanProcessorM ()
[spanProcessorSpecShutdownTimeout] :: SpanProcessorSpec -> Int
[spanProcessorSpecForceFlush] :: SpanProcessorSpec -> SpanProcessorM ()
[spanProcessorSpecForceFlushTimeout] :: SpanProcessorSpec -> Int
[spanProcessorSpecOnTimeout] :: SpanProcessorSpec -> OnTimeout ()
[spanProcessorSpecOnException] :: SpanProcessorSpec -> OnException ()
defaultSpanProcessorSpec :: SpanProcessorSpec
data SpanExportResult
SpanExportResultSuccess :: SpanExportResult
SpanExportResultFailure :: SpanExportResult
data SpanExporter
SpanExporter :: (Batch (Span Attrs) -> (SpanExportResult -> IO ()) -> IO ()) -> IO () -> IO () -> SpanExporter
[spanExporterExport] :: SpanExporter -> Batch (Span Attrs) -> (SpanExportResult -> IO ()) -> IO ()
[spanExporterShutdown] :: SpanExporter -> IO ()
[spanExporterForceFlush] :: SpanExporter -> IO ()
buildSpanExporter :: Resource Attrs -> Logger -> SpanExporterSpec -> IO SpanExporter
data OTLPSpanExporterSpec
OTLPSpanExporterSpec :: Manager -> URI -> Int -> OTLPProtocol -> [Header] -> [HeaderName] -> [HeaderName] -> Int -> Int -> RetryPolicyM IO -> OTLPSpanExporterSpec
[otlpSpanExporterSpecManager] :: OTLPSpanExporterSpec -> Manager
[otlpSpanExporterSpecEndpoint] :: OTLPSpanExporterSpec -> URI
[otlpSpanExporterSpecTimeout] :: OTLPSpanExporterSpec -> Int
[otlpSpanExporterSpecProtocol] :: OTLPSpanExporterSpec -> OTLPProtocol

-- | A list of headers to include when communicating with the observability
--   backend (e.g. Honeycomb) over HTTP.
--   
--   Use this list to include the necessary secrets for talking with your
--   observability backend(s).
[otlpSpanExporterSpecHeaders] :: OTLPSpanExporterSpec -> [Header]

-- | A list of sensitive header names that will be redacted before a
--   <a>Request</a> is displayed. Note that the only time a <a>Request</a>
--   is displayed is when the span exporter encounters an
--   <a>HttpException</a> when communicating with the observability backend
--   (e.g. Honeycomb). The default is <a>mempty</a>.
--   
--   Use this list to avoid leaking sensitive data like API keys into your
--   logs:
--   
--   <pre>
--   <a>defaultOTLPSpanExporterSpec</a>
--     { <a>otlpSpanExporterSpecRedactedRequestHeaders</a> = ["x-honeycomb-team"]
--     }
--   </pre>
[otlpSpanExporterSpecRedactedRequestHeaders] :: OTLPSpanExporterSpec -> [HeaderName]

-- | A list of sensitive header names that will be redacted before a
--   <a>Response</a> is displayed. Note that the only time a
--   <a>Response</a> is displayed is when the span exporter encounters an
--   <a>HttpException</a> when communicating with the observability backend
--   (e.g. Honeycomb). The default is <a>mempty</a>.
--   
--   Use this list to avoid leaking sensitive data like API keys into your
--   logs.
--   
--   <pre>
--   <a>defaultOTLPSpanExporterSpec</a>
--     { <a>otlpSpanExporterSpecRedactedResponseHeaders</a> = ["x-honeycomb-team"]
--     }
--   </pre>
[otlpSpanExporterSpecRedactedResponseHeaders] :: OTLPSpanExporterSpec -> [HeaderName]
[otlpSpanExporterSpecWorkerQueueSize] :: OTLPSpanExporterSpec -> Int
[otlpSpanExporterSpecWorkerCount] :: OTLPSpanExporterSpec -> Int

-- | The retry policy to use when communicating with the observability
--   backend produces an exception.
--   
--   The default is defined as follows:
--   
--   <pre>
--   <a>fullJitterBackoff</a> 10_000 &lt;&gt; <a>limitRetries</a> 10
--   </pre>
--   
--   <a>simulatePolicyPP</a> can be used to get an idea of the retry
--   policy's iterations and total cumulative delay:
--   
--   <pre>
--   ghci&gt; simulatePolicyPP 10 $ fullJitterBackoff 10000 &lt;&gt; limitRetries 10
--   0: 6.659ms
--   1: 12.302ms
--   2: 21.228ms
--   3: 45.048ms
--   4: 128.142ms
--   5: 274.269ms
--   6: 351.933ms
--   7: 688.239ms
--   8: 1313.14ms
--   9: 4806.224ms
--   10: Inhibit
--   Total cumulative delay would be: 7647.184ms
--   </pre>
--   
--   For more info on defining custom retry policies, see
--   <a>Control.Retry</a>.
[otlpSpanExporterSpecRetryPolicy] :: OTLPSpanExporterSpec -> RetryPolicyM IO
defaultOTLPSpanExporterSpec :: OTLPSpanExporterSpec
otlpSpanExporter :: forall a. OTLPSpanExporterSpec -> Logger -> (SpanExporterSpec -> IO a) -> IO a
data OTLPProtocol
OTLPProtocolHTTPProtobuf :: OTLPProtocol
httpProtobufProtocol :: OTLPProtocol

-- | An ad-hoc helper type for use in <tt>otlpSpanExporterIO</tt>.
data OTLPSpanExporterItem
OTLPSpanExporterItem :: Batch (Span Attrs) -> (SpanExportResult -> IO ()) -> Resource Attrs -> OTLPSpanExporterItem
[otlpSpanExporterItemBatch] :: OTLPSpanExporterItem -> Batch (Span Attrs)
[otlpSpanExporterItemCallback] :: OTLPSpanExporterItem -> SpanExportResult -> IO ()
[otlpSpanExporterResource] :: OTLPSpanExporterItem -> Resource Attrs
stmSpanExporter :: forall a. TMQueue (Span Attrs) -> Logger -> (SpanExporterSpec -> IO a) -> IO a
data SpanExporterSpec
SpanExporterSpec :: Text -> (Batch (Span Attrs) -> (SpanExportResult -> IO ()) -> SpanExporterM ()) -> SpanExporterM () -> Int -> SpanExporterM () -> Int -> OnTimeout () -> OnException () -> SpanExporterSpec
[spanExporterSpecName] :: SpanExporterSpec -> Text
[spanExporterSpecExport] :: SpanExporterSpec -> Batch (Span Attrs) -> (SpanExportResult -> IO ()) -> SpanExporterM ()
[spanExporterSpecShutdown] :: SpanExporterSpec -> SpanExporterM ()
[spanExporterSpecShutdownTimeout] :: SpanExporterSpec -> Int
[spanExporterSpecForceFlush] :: SpanExporterSpec -> SpanExporterM ()
[spanExporterSpecForceFlushTimeout] :: SpanExporterSpec -> Int
[spanExporterSpecOnTimeout] :: SpanExporterSpec -> OnTimeout ()
[spanExporterSpecOnException] :: SpanExporterSpec -> OnException ()
defaultSpanExporterSpec :: SpanExporterSpec
data Sampler
Sampler :: Text -> Text -> (SamplerInput -> IO SamplingResult) -> Sampler
[samplerName] :: Sampler -> Text
[samplerDescription] :: Sampler -> Text
[samplerShouldSample] :: Sampler -> SamplerInput -> IO SamplingResult
buildSampler :: forall m. MonadIO m => Logger -> SamplerSpec -> m Sampler
data SamplerSpec
SamplerSpec :: Text -> Text -> (SamplerInput -> SamplerM SamplingResult) -> OnException SamplingResult -> SamplerSpec
[samplerSpecName] :: SamplerSpec -> Text
[samplerSpecDescription] :: SamplerSpec -> Text
[samplerSpecShouldSample] :: SamplerSpec -> SamplerInput -> SamplerM SamplingResult
[samplerSpecOnException] :: SamplerSpec -> OnException SamplingResult
defaultSamplerSpec :: SamplerSpec
alwaysOnSampler :: forall a. Logger -> (SamplerSpec -> IO a) -> IO a
alwaysOffSampler :: forall a. Logger -> (SamplerSpec -> IO a) -> IO a
data ParentBasedSamplerSpec
ParentBasedSamplerSpec :: (forall a. Logger -> (SamplerSpec -> IO a) -> IO a) -> (forall a. Logger -> (SamplerSpec -> IO a) -> IO a) -> (forall a. Logger -> (SamplerSpec -> IO a) -> IO a) -> (forall a. Logger -> (SamplerSpec -> IO a) -> IO a) -> (forall a. Logger -> (SamplerSpec -> IO a) -> IO a) -> ParentBasedSamplerSpec
[parentBasedSamplerSpecOnRoot] :: ParentBasedSamplerSpec -> forall a. Logger -> (SamplerSpec -> IO a) -> IO a
[parentBasedSamplerSpecOnRemoteParentSampled] :: ParentBasedSamplerSpec -> forall a. Logger -> (SamplerSpec -> IO a) -> IO a
[parentBasedSamplerSpecOnRemoteParentNotSampled] :: ParentBasedSamplerSpec -> forall a. Logger -> (SamplerSpec -> IO a) -> IO a
[parentBasedSamplerSpecOnLocalParentSampled] :: ParentBasedSamplerSpec -> forall a. Logger -> (SamplerSpec -> IO a) -> IO a
[parentBasedSamplerSpecOnLocalParentNotSampled] :: ParentBasedSamplerSpec -> forall a. Logger -> (SamplerSpec -> IO a) -> IO a
defaultParentBasedSamplerSpec :: ParentBasedSamplerSpec
parentBasedSampler :: forall a. ParentBasedSamplerSpec -> Logger -> (SamplerSpec -> IO a) -> IO a
constDecisionSampler :: SamplingDecision -> SamplerSpec
data SamplerInput
SamplerInput :: Context -> TraceId -> SpanName -> SpanKind -> AttrsBuilder 'AttrsForSpan -> SpanLinks AttrsBuilder -> SamplerInput
[samplerInputContext] :: SamplerInput -> Context
[samplerInputTraceId] :: SamplerInput -> TraceId
[samplerInputSpanName] :: SamplerInput -> SpanName
[samplerInputSpanKind] :: SamplerInput -> SpanKind
[samplerInputSpanAttrs] :: SamplerInput -> AttrsBuilder 'AttrsForSpan
[samplerInputSpanLinks] :: SamplerInput -> SpanLinks AttrsBuilder
data SamplingResult
SamplingResult :: SamplingDecision -> AttrsBuilder 'AttrsForSpan -> TraceState -> SamplingResult
[samplingResultDecision] :: SamplingResult -> SamplingDecision
[samplingResultSpanAttrs] :: SamplingResult -> AttrsBuilder 'AttrsForSpan
[samplingResultTraceState] :: SamplingResult -> TraceState
defaultSamplingResult :: SamplingResult
data SamplingDecision
SamplingDecisionDrop :: SamplingDecision
SamplingDecisionRecordOnly :: SamplingDecision
SamplingDecisionRecordAndSample :: SamplingDecision
samplingDecisionDrop :: SamplingDecision
samplingDecisionRecordOnly :: SamplingDecision
samplingDecisionRecordAndSample :: SamplingDecision
newtype SpanProcessorM a
SpanProcessorM :: (SpanExporter -> LoggingT IO a) -> SpanProcessorM a
[unSpanProcessorM] :: SpanProcessorM a -> SpanExporter -> LoggingT IO a
askSpanExporter :: SpanProcessorM SpanExporter
runSpanProcessorM :: SpanExporter -> Logger -> OnTimeout a -> OnException a -> Int -> [SeriesElem] -> SpanProcessorM a -> IO a
newtype SpanExporterM a
SpanExporterM :: (Resource Attrs -> LoggingT IO a) -> SpanExporterM a
[unSpanExporterM] :: SpanExporterM a -> Resource Attrs -> LoggingT IO a
askResource :: SpanExporterM (Resource Attrs)
runSpanExporterM :: Resource Attrs -> Logger -> OnTimeout a -> OnException a -> Int -> [SeriesElem] -> SpanExporterM a -> IO a
newtype SamplerM a
SamplerM :: LoggingT IO a -> SamplerM a
[unSamplerM] :: SamplerM a -> LoggingT IO a
runSamplerM :: Logger -> OnException a -> [SeriesElem] -> SamplerM a -> IO a
newtype IdGeneratorM a
IdGeneratorM :: (PRNG -> LoggingT IO a) -> IdGeneratorM a
[unIdGeneratorM] :: IdGeneratorM a -> PRNG -> LoggingT IO a
runIdGeneratorM :: PRNG -> Logger -> IdGeneratorM a -> IO a
data IdGenerator
IdGenerator :: (PRNG -> IO TraceId) -> (PRNG -> IO SpanId) -> IdGenerator
[idGeneratorGenTraceId] :: IdGenerator -> PRNG -> IO TraceId
[idGeneratorGenSpanId] :: IdGenerator -> PRNG -> IO SpanId
buildIdGenerator :: forall m. MonadIO m => Logger -> IdGeneratorSpec -> m IdGenerator
data IdGeneratorSpec
IdGeneratorSpec :: Text -> IdGeneratorM TraceId -> IdGeneratorM SpanId -> IdGeneratorSpec
[idGeneratorSpecName] :: IdGeneratorSpec -> Text
[idGeneratorSpecGenTraceId] :: IdGeneratorSpec -> IdGeneratorM TraceId
[idGeneratorSpecGenSpanId] :: IdGeneratorSpec -> IdGeneratorM SpanId
defaultIdGeneratorSpec :: IdGeneratorSpec
newtype PRNG
PRNG :: GenIO -> PRNG
[unPRNG] :: PRNG -> GenIO
genUniform :: forall a. Variate a => IdGeneratorM a
newPRNGRef :: Seed -> IO (MVar PRNG)
newtype OnException a
OnException :: (SomeException -> [SeriesElem] -> LoggingT IO a) -> OnException a
[runOnException] :: OnException a -> SomeException -> [SeriesElem] -> LoggingT IO a
askException :: OnException SomeException
askExceptionMetadata :: OnException [SeriesElem]
newtype OnTimeout a
OnTimeout :: (Int -> [SeriesElem] -> LoggingT IO a) -> OnTimeout a
[runOnTimeout] :: OnTimeout a -> Int -> [SeriesElem] -> LoggingT IO a
askTimeoutMicros :: OnTimeout Int
askTimeoutMetadata :: OnTimeout [SeriesElem]
newtype OnSpansExported a
OnSpansExported :: (Batch (Span Attrs) -> SpanExportResult -> [SeriesElem] -> LoggingT IO a) -> OnSpansExported a
[runOnSpansExported] :: OnSpansExported a -> Batch (Span Attrs) -> SpanExportResult -> [SeriesElem] -> LoggingT IO a
askSpansExported :: OnSpansExported (Batch (Span Attrs))
askSpansExportedResult :: OnSpansExported SpanExportResult
askSpansExportedMetadata :: OnSpansExported [SeriesElem]
newtype Batch a
Batch :: [a] -> Batch a
[unBatch] :: Batch a -> [a]
singletonBatch :: a -> Batch a
fromListBatch :: [a] -> Batch a
data ConcurrentWorkersSpec item
ConcurrentWorkersSpec :: Int -> Int -> (item -> IO ()) -> Logger -> [SeriesElem] -> (item -> OnException ()) -> ConcurrentWorkersSpec item
[concurrentWorkersSpecQueueSize] :: ConcurrentWorkersSpec item -> Int
[concurrentWorkersSpecWorkerCount] :: ConcurrentWorkersSpec item -> Int
[concurrentWorkersSpecProcessItem] :: ConcurrentWorkersSpec item -> item -> IO ()
[concurrentWorkersSpecLogger] :: ConcurrentWorkersSpec item -> Logger
[concurrentWorkersSpecLoggingMeta] :: ConcurrentWorkersSpec item -> [SeriesElem]
[concurrentWorkersSpecOnException] :: ConcurrentWorkersSpec item -> item -> OnException ()
defaultConcurrentWorkersSpec :: ConcurrentWorkersSpec item
data ConcurrentWorkers item
ConcurrentWorkers :: (item -> IO ()) -> IO () -> ConcurrentWorkers item
[concurrentWorkersEnqueueItem] :: ConcurrentWorkers item -> item -> IO ()
[concurrentWorkersStopWorkers] :: ConcurrentWorkers item -> IO ()
withConcurrentWorkers :: forall item a. (ToJSON item, Typeable item) => ConcurrentWorkersSpec item -> (ConcurrentWorkers item -> IO a) -> IO a
unlessSTM :: Monoid a => STM Bool -> STM (IO a) -> IO a
withAll :: forall a b. [(a -> b) -> b] -> ([a] -> b) -> b
defaultSystemSeed :: Seed
defaultManager :: Manager
spanSummary :: Span attrs -> Value
redactHttpExceptionHeaders :: Set HeaderName -> Set HeaderName -> SomeException -> SomeException
instance GHC.Show.Show OTel.SDK.Trace.Internal.SpanExportResult
instance GHC.Classes.Eq OTel.SDK.Trace.Internal.SpanExportResult
instance GHC.Show.Show OTel.SDK.Trace.Internal.OTLPProtocol
instance GHC.Classes.Eq OTel.SDK.Trace.Internal.OTLPProtocol
instance GHC.Show.Show OTel.SDK.Trace.Internal.SamplingDecision
instance GHC.Classes.Eq OTel.SDK.Trace.Internal.SamplingDecision
instance GHC.Base.Monoid a => GHC.Base.Monoid (OTel.SDK.Trace.Internal.SpanExporterM a)
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (OTel.SDK.Trace.Internal.SpanExporterM a)
instance Control.Monad.Logger.MonadLoggerIO OTel.SDK.Trace.Internal.SpanExporterM
instance Control.Monad.Logger.MonadLogger OTel.SDK.Trace.Internal.SpanExporterM
instance Control.Monad.IO.Unlift.MonadUnliftIO OTel.SDK.Trace.Internal.SpanExporterM
instance Control.Monad.Catch.MonadThrow OTel.SDK.Trace.Internal.SpanExporterM
instance Control.Monad.Catch.MonadMask OTel.SDK.Trace.Internal.SpanExporterM
instance Control.Monad.Catch.MonadCatch OTel.SDK.Trace.Internal.SpanExporterM
instance Control.Monad.IO.Class.MonadIO OTel.SDK.Trace.Internal.SpanExporterM
instance GHC.Base.Monad OTel.SDK.Trace.Internal.SpanExporterM
instance GHC.Base.Functor OTel.SDK.Trace.Internal.SpanExporterM
instance GHC.Base.Applicative OTel.SDK.Trace.Internal.SpanExporterM
instance GHC.Base.Monoid a => GHC.Base.Monoid (OTel.SDK.Trace.Internal.SamplerM a)
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (OTel.SDK.Trace.Internal.SamplerM a)
instance Control.Monad.Logger.MonadLoggerIO OTel.SDK.Trace.Internal.SamplerM
instance Control.Monad.Logger.MonadLogger OTel.SDK.Trace.Internal.SamplerM
instance Control.Monad.IO.Unlift.MonadUnliftIO OTel.SDK.Trace.Internal.SamplerM
instance Control.Monad.Catch.MonadThrow OTel.SDK.Trace.Internal.SamplerM
instance Control.Monad.Catch.MonadMask OTel.SDK.Trace.Internal.SamplerM
instance Control.Monad.Catch.MonadCatch OTel.SDK.Trace.Internal.SamplerM
instance Control.Monad.IO.Class.MonadIO OTel.SDK.Trace.Internal.SamplerM
instance GHC.Base.Monad OTel.SDK.Trace.Internal.SamplerM
instance GHC.Base.Functor OTel.SDK.Trace.Internal.SamplerM
instance GHC.Base.Applicative OTel.SDK.Trace.Internal.SamplerM
instance GHC.Base.Monoid a => GHC.Base.Monoid (OTel.SDK.Trace.Internal.IdGeneratorM a)
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (OTel.SDK.Trace.Internal.IdGeneratorM a)
instance Control.Monad.Logger.MonadLoggerIO OTel.SDK.Trace.Internal.IdGeneratorM
instance Control.Monad.Logger.MonadLogger OTel.SDK.Trace.Internal.IdGeneratorM
instance Control.Monad.IO.Unlift.MonadUnliftIO OTel.SDK.Trace.Internal.IdGeneratorM
instance Control.Monad.Catch.MonadThrow OTel.SDK.Trace.Internal.IdGeneratorM
instance Control.Monad.Catch.MonadMask OTel.SDK.Trace.Internal.IdGeneratorM
instance Control.Monad.Catch.MonadCatch OTel.SDK.Trace.Internal.IdGeneratorM
instance Control.Monad.IO.Class.MonadIO OTel.SDK.Trace.Internal.IdGeneratorM
instance GHC.Base.Monad OTel.SDK.Trace.Internal.IdGeneratorM
instance GHC.Base.Functor OTel.SDK.Trace.Internal.IdGeneratorM
instance GHC.Base.Applicative OTel.SDK.Trace.Internal.IdGeneratorM
instance GHC.Base.Monad OTel.SDK.Trace.Internal.Batch
instance GHC.Base.Applicative OTel.SDK.Trace.Internal.Batch
instance GHC.Base.Functor OTel.SDK.Trace.Internal.Batch
instance Data.Foldable.Foldable OTel.SDK.Trace.Internal.Batch
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (OTel.SDK.Trace.Internal.Batch a)
instance GHC.Base.Semigroup (OTel.SDK.Trace.Internal.Batch a)
instance GHC.Base.Monoid (OTel.SDK.Trace.Internal.Batch a)
instance GHC.Show.Show a => GHC.Show.Show (OTel.SDK.Trace.Internal.Batch a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (OTel.SDK.Trace.Internal.Batch a)
instance GHC.Base.Monoid a => GHC.Base.Monoid (OTel.SDK.Trace.Internal.OnSpansExported a)
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (OTel.SDK.Trace.Internal.OnSpansExported a)
instance Control.Monad.Logger.MonadLoggerIO OTel.SDK.Trace.Internal.OnSpansExported
instance Control.Monad.Logger.MonadLogger OTel.SDK.Trace.Internal.OnSpansExported
instance Control.Monad.IO.Unlift.MonadUnliftIO OTel.SDK.Trace.Internal.OnSpansExported
instance Control.Monad.Catch.MonadThrow OTel.SDK.Trace.Internal.OnSpansExported
instance Control.Monad.Catch.MonadMask OTel.SDK.Trace.Internal.OnSpansExported
instance Control.Monad.Catch.MonadCatch OTel.SDK.Trace.Internal.OnSpansExported
instance Control.Monad.IO.Class.MonadIO OTel.SDK.Trace.Internal.OnSpansExported
instance GHC.Base.Monad OTel.SDK.Trace.Internal.OnSpansExported
instance GHC.Base.Functor OTel.SDK.Trace.Internal.OnSpansExported
instance GHC.Base.Applicative OTel.SDK.Trace.Internal.OnSpansExported
instance GHC.Base.Monoid a => GHC.Base.Monoid (OTel.SDK.Trace.Internal.SpanProcessorM a)
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (OTel.SDK.Trace.Internal.SpanProcessorM a)
instance Control.Monad.Logger.MonadLoggerIO OTel.SDK.Trace.Internal.SpanProcessorM
instance Control.Monad.Logger.MonadLogger OTel.SDK.Trace.Internal.SpanProcessorM
instance Control.Monad.IO.Unlift.MonadUnliftIO OTel.SDK.Trace.Internal.SpanProcessorM
instance Control.Monad.Catch.MonadThrow OTel.SDK.Trace.Internal.SpanProcessorM
instance Control.Monad.Catch.MonadMask OTel.SDK.Trace.Internal.SpanProcessorM
instance Control.Monad.Catch.MonadCatch OTel.SDK.Trace.Internal.SpanProcessorM
instance Control.Monad.IO.Class.MonadIO OTel.SDK.Trace.Internal.SpanProcessorM
instance GHC.Base.Monad OTel.SDK.Trace.Internal.SpanProcessorM
instance GHC.Base.Functor OTel.SDK.Trace.Internal.SpanProcessorM
instance GHC.Base.Applicative OTel.SDK.Trace.Internal.SpanProcessorM
instance Data.Aeson.Types.ToJSON.ToJSON OTel.SDK.Trace.Internal.OTLPSpanExporterItem
instance Data.Traversable.Traversable OTel.SDK.Trace.Internal.Batch
instance GHC.Base.Semigroup OTel.SDK.Trace.Internal.SpanProcessor
instance GHC.Base.Monoid OTel.SDK.Trace.Internal.SpanProcessor

module OTel.SDK.Trace.IdGenerator
data IdGenerator
data IdGeneratorSpec
defaultIdGeneratorSpec :: IdGeneratorSpec
idGeneratorSpecName :: IdGeneratorSpec -> Text
idGeneratorSpecGenTraceId :: IdGeneratorSpec -> IdGeneratorM TraceId
idGeneratorSpecGenSpanId :: IdGeneratorSpec -> IdGeneratorM SpanId
data IdGeneratorM a
genUniform :: forall a. Variate a => IdGeneratorM a

module OTel.SDK.Trace.Handlers.OnSpansExported
data OnSpansExported a
askSpansExported :: OnSpansExported (Batch (Span Attrs))
askSpansExportedResult :: OnSpansExported SpanExportResult
askSpansExportedMetadata :: OnSpansExported [SeriesElem]

module OTel.SDK.Trace.Handlers

module OTel.SDK.Trace.Common
data Batch a
singletonBatch :: a -> Batch a
fromListBatch :: [a] -> Batch a

module OTel.SDK.Trace.Sampler.AlwaysOff
alwaysOffSampler :: forall a. Logger -> (SamplerSpec -> IO a) -> IO a

module OTel.SDK.Trace.Sampler.AlwaysOn
alwaysOnSampler :: forall a. Logger -> (SamplerSpec -> IO a) -> IO a

module OTel.SDK.Trace.Sampler.ParentBased
parentBasedSampler :: forall a. ParentBasedSamplerSpec -> Logger -> (SamplerSpec -> IO a) -> IO a
data ParentBasedSamplerSpec
defaultParentBasedSamplerSpec :: ParentBasedSamplerSpec
parentBasedSamplerSpecOnRoot :: ParentBasedSamplerSpec -> forall a. Logger -> (SamplerSpec -> IO a) -> IO a
parentBasedSamplerSpecOnRemoteParentSampled :: ParentBasedSamplerSpec -> forall a. Logger -> (SamplerSpec -> IO a) -> IO a
parentBasedSamplerSpecOnRemoteParentNotSampled :: ParentBasedSamplerSpec -> forall a. Logger -> (SamplerSpec -> IO a) -> IO a
parentBasedSamplerSpecOnLocalParentSampled :: ParentBasedSamplerSpec -> forall a. Logger -> (SamplerSpec -> IO a) -> IO a
parentBasedSamplerSpecOnLocalParentNotSampled :: ParentBasedSamplerSpec -> forall a. Logger -> (SamplerSpec -> IO a) -> IO a

module OTel.SDK.Trace.Sampler
data Sampler
data SamplingResult
defaultSamplingResult :: SamplingResult
samplingResultDecision :: SamplingResult -> SamplingDecision
samplingResultSpanAttrs :: SamplingResult -> AttrsBuilder 'AttrsForSpan
samplingResultTraceState :: SamplingResult -> TraceState
data SamplingDecision
samplingDecisionDrop :: SamplingDecision
samplingDecisionRecordOnly :: SamplingDecision
samplingDecisionRecordAndSample :: SamplingDecision
data SamplerInput
samplerInputContext :: SamplerInput -> Context
samplerInputTraceId :: SamplerInput -> TraceId
samplerInputSpanName :: SamplerInput -> SpanName
samplerInputSpanKind :: SamplerInput -> SpanKind
samplerInputSpanAttrs :: SamplerInput -> AttrsBuilder 'AttrsForSpan
samplerInputSpanLinks :: SamplerInput -> SpanLinks AttrsBuilder
data SamplerSpec
defaultSamplerSpec :: SamplerSpec
samplerSpecName :: SamplerSpec -> Text
samplerSpecDescription :: SamplerSpec -> Text
samplerSpecShouldSample :: SamplerSpec -> SamplerInput -> SamplerM SamplingResult
samplerSpecOnException :: SamplerSpec -> OnException SamplingResult
data SamplerM a

module OTel.SDK.Trace.SpanExporter.OTLP
otlpSpanExporter :: forall a. OTLPSpanExporterSpec -> Logger -> (SpanExporterSpec -> IO a) -> IO a
data OTLPSpanExporterSpec
defaultOTLPSpanExporterSpec :: OTLPSpanExporterSpec
otlpSpanExporterSpecManager :: OTLPSpanExporterSpec -> Manager
otlpSpanExporterSpecEndpoint :: OTLPSpanExporterSpec -> URI
otlpSpanExporterSpecTimeout :: OTLPSpanExporterSpec -> Int
otlpSpanExporterSpecProtocol :: OTLPSpanExporterSpec -> OTLPProtocol

-- | A list of headers to include when communicating with the observability
--   backend (e.g. Honeycomb) over HTTP.
--   
--   Use this list to include the necessary secrets for talking with your
--   observability backend(s).
otlpSpanExporterSpecHeaders :: OTLPSpanExporterSpec -> [Header]

-- | A list of sensitive header names that will be redacted before a
--   <a>Request</a> is displayed. Note that the only time a <a>Request</a>
--   is displayed is when the span exporter encounters an
--   <a>HttpException</a> when communicating with the observability backend
--   (e.g. Honeycomb). The default is <a>mempty</a>.
--   
--   Use this list to avoid leaking sensitive data like API keys into your
--   logs:
--   
--   <pre>
--   <a>defaultOTLPSpanExporterSpec</a>
--     { <a>otlpSpanExporterSpecRedactedRequestHeaders</a> = ["x-honeycomb-team"]
--     }
--   </pre>
otlpSpanExporterSpecRedactedRequestHeaders :: OTLPSpanExporterSpec -> [HeaderName]

-- | A list of sensitive header names that will be redacted before a
--   <a>Response</a> is displayed. Note that the only time a
--   <a>Response</a> is displayed is when the span exporter encounters an
--   <a>HttpException</a> when communicating with the observability backend
--   (e.g. Honeycomb). The default is <a>mempty</a>.
--   
--   Use this list to avoid leaking sensitive data like API keys into your
--   logs.
--   
--   <pre>
--   <a>defaultOTLPSpanExporterSpec</a>
--     { <a>otlpSpanExporterSpecRedactedResponseHeaders</a> = ["x-honeycomb-team"]
--     }
--   </pre>
otlpSpanExporterSpecRedactedResponseHeaders :: OTLPSpanExporterSpec -> [HeaderName]
otlpSpanExporterSpecWorkerQueueSize :: OTLPSpanExporterSpec -> Int
otlpSpanExporterSpecWorkerCount :: OTLPSpanExporterSpec -> Int

-- | The retry policy to use when communicating with the observability
--   backend produces an exception.
--   
--   The default is defined as follows:
--   
--   <pre>
--   <a>fullJitterBackoff</a> 10_000 &lt;&gt; <a>limitRetries</a> 10
--   </pre>
--   
--   <a>simulatePolicyPP</a> can be used to get an idea of the retry
--   policy's iterations and total cumulative delay:
--   
--   <pre>
--   ghci&gt; simulatePolicyPP 10 $ fullJitterBackoff 10000 &lt;&gt; limitRetries 10
--   0: 6.659ms
--   1: 12.302ms
--   2: 21.228ms
--   3: 45.048ms
--   4: 128.142ms
--   5: 274.269ms
--   6: 351.933ms
--   7: 688.239ms
--   8: 1313.14ms
--   9: 4806.224ms
--   10: Inhibit
--   Total cumulative delay would be: 7647.184ms
--   </pre>
--   
--   For more info on defining custom retry policies, see
--   <a>Control.Retry</a>.
otlpSpanExporterSpecRetryPolicy :: OTLPSpanExporterSpec -> RetryPolicyM IO
data OTLPProtocol
httpProtobufProtocol :: OTLPProtocol

module OTel.SDK.Trace.SpanExporter.STM
stmSpanExporter :: forall a. TMQueue (Span Attrs) -> Logger -> (SpanExporterSpec -> IO a) -> IO a

module OTel.SDK.Trace.SpanExporter
data SpanExporter
spanExporterExport :: SpanExporter -> Batch (Span Attrs) -> (SpanExportResult -> IO ()) -> IO ()
spanExporterShutdown :: SpanExporter -> IO ()
spanExporterForceFlush :: SpanExporter -> IO ()
data SpanExportResult
SpanExportResultSuccess :: SpanExportResult
SpanExportResultFailure :: SpanExportResult
data SpanExporterSpec
defaultSpanExporterSpec :: SpanExporterSpec
spanExporterSpecName :: SpanExporterSpec -> Text
spanExporterSpecExport :: SpanExporterSpec -> Batch (Span Attrs) -> (SpanExportResult -> IO ()) -> SpanExporterM ()
spanExporterSpecShutdown :: SpanExporterSpec -> SpanExporterM ()
spanExporterSpecShutdownTimeout :: SpanExporterSpec -> Int
spanExporterSpecForceFlush :: SpanExporterSpec -> SpanExporterM ()
spanExporterSpecForceFlushTimeout :: SpanExporterSpec -> Int
spanExporterSpecOnTimeout :: SpanExporterSpec -> OnTimeout ()
spanExporterSpecOnException :: SpanExporterSpec -> OnException ()
data SpanExporterM a
askResource :: SpanExporterM (Resource Attrs)

module OTel.SDK.Trace.SpanProcessor.Simple
simpleSpanProcessor :: forall a. SimpleSpanProcessorSpec -> Logger -> (SpanProcessorSpec -> IO a) -> IO a
data SimpleSpanProcessorSpec
defaultSimpleSpanProcessorSpec :: SimpleSpanProcessorSpec
simpleSpanProcessorSpecName :: SimpleSpanProcessorSpec -> Text
simpleSpanProcessorSpecExporter :: SimpleSpanProcessorSpec -> forall a. Logger -> (SpanExporterSpec -> IO a) -> IO a
simpleSpanProcessorSpecOnSpansExported :: SimpleSpanProcessorSpec -> OnSpansExported ()

module OTel.SDK.Trace.SpanProcessor
data SpanProcessor
data SpanProcessorSpec
defaultSpanProcessorSpec :: SpanProcessorSpec
spanProcessorSpecName :: SpanProcessorSpec -> Text
spanProcessorSpecExporter :: SpanProcessorSpec -> forall a. Logger -> (SpanExporterSpec -> IO a) -> IO a
spanProcessorSpecOnSpanStart :: SpanProcessorSpec -> Context -> (UpdateSpanSpec -> SpanProcessorM (Span Attrs)) -> SpanProcessorM ()
spanProcessorSpecOnSpanEnd :: SpanProcessorSpec -> Span Attrs -> SpanProcessorM ()
spanProcessorSpecShutdown :: SpanProcessorSpec -> SpanProcessorM ()
spanProcessorSpecShutdownTimeout :: SpanProcessorSpec -> Int
spanProcessorSpecForceFlush :: SpanProcessorSpec -> SpanProcessorM ()
spanProcessorSpecForceFlushTimeout :: SpanProcessorSpec -> Int
spanProcessorSpecOnTimeout :: SpanProcessorSpec -> OnTimeout ()
spanProcessorSpecOnException :: SpanProcessorSpec -> OnException ()
data SpanProcessorM a
askSpanExporter :: SpanProcessorM SpanExporter

module OTel.SDK.Trace
withTracerProvider :: forall m a. MonadUnliftIO m => TracerProviderSpec -> (TracerProvider -> m a) -> m a
data TracerProviderSpec
defaultTracerProviderSpec :: TracerProviderSpec
tracerProviderSpecNow :: TracerProviderSpec -> IO Timestamp
tracerProviderSpecLogger :: TracerProviderSpec -> Logger
tracerProviderSpecSeed :: TracerProviderSpec -> Seed
tracerProviderSpecIdGenerator :: TracerProviderSpec -> forall a. Logger -> (IdGeneratorSpec -> IO a) -> IO a
tracerProviderSpecSpanProcessors :: TracerProviderSpec -> forall a. [Logger -> (SpanProcessorSpec -> IO a) -> IO a]
tracerProviderSpecSampler :: TracerProviderSpec -> forall a. Logger -> (SamplerSpec -> IO a) -> IO a
tracerProviderSpecSpanAttrsLimits :: TracerProviderSpec -> AttrsLimits 'AttrsForSpan
tracerProviderSpecSpanEventAttrsLimits :: TracerProviderSpec -> AttrsLimits 'AttrsForSpanEvent
tracerProviderSpecSpanLinkAttrsLimits :: TracerProviderSpec -> AttrsLimits 'AttrsForSpanLink
tracerProviderSpecCallStackAttrs :: TracerProviderSpec -> CallStack -> AttrsBuilder 'AttrsForSpan
tracerProviderSpecResource :: TracerProviderSpec -> Resource Attrs
tracerProviderSpecSpanContextMeta :: TracerProviderSpec -> SpanContext -> [Pair]
