-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | STUB
--   
--   <tt>otel-api-baggage-core</tt> STUB
@package otel-api-baggage-core
@version 0.0.0

module OTel.API.Baggage.Core.Builder.Errors
newtype BaggageErrors
BaggageErrors :: [BaggageError] -> BaggageErrors
[$sel:unBaggageErrors:BaggageErrors] :: BaggageErrors -> [BaggageError]
data BaggageError
BaggageKeyIsEmpty :: BaggageKeyIsEmptyError -> BaggageError
BaggageKeyContainsInvalidChars :: BaggageKeyContainsInvalidCharsError -> BaggageError
BaggageValueIsEmpty :: BaggageValueIsEmptyError -> BaggageError
BaggageValueContainsInvalidChars :: BaggageValueContainsInvalidCharsError -> BaggageError
newtype BaggageKeyIsEmptyError
BaggageKeyIsEmptyError :: Text -> BaggageKeyIsEmptyError
[$sel:rawValue:BaggageKeyIsEmptyError] :: BaggageKeyIsEmptyError -> Text
data BaggageKeyContainsInvalidCharsError
BaggageKeyContainsInvalidCharsError :: Key Text -> Text -> Text -> BaggageKeyContainsInvalidCharsError
[$sel:rawKey:BaggageKeyContainsInvalidCharsError] :: BaggageKeyContainsInvalidCharsError -> Key Text
[$sel:rawValue:BaggageKeyContainsInvalidCharsError] :: BaggageKeyContainsInvalidCharsError -> Text
[$sel:invalidChars:BaggageKeyContainsInvalidCharsError] :: BaggageKeyContainsInvalidCharsError -> Text
newtype BaggageValueIsEmptyError
BaggageValueIsEmptyError :: Key Text -> BaggageValueIsEmptyError
[$sel:rawKey:BaggageValueIsEmptyError] :: BaggageValueIsEmptyError -> Key Text
data BaggageValueContainsInvalidCharsError
BaggageValueContainsInvalidCharsError :: Key Text -> Text -> Text -> BaggageValueContainsInvalidCharsError
[$sel:rawKey:BaggageValueContainsInvalidCharsError] :: BaggageValueContainsInvalidCharsError -> Key Text
[$sel:rawValue:BaggageValueContainsInvalidCharsError] :: BaggageValueContainsInvalidCharsError -> Text
[$sel:invalidChars:BaggageValueContainsInvalidCharsError] :: BaggageValueContainsInvalidCharsError -> Text
instance GHC.Show.Show OTel.API.Baggage.Core.Builder.Errors.BaggageKeyIsEmptyError
instance GHC.Classes.Eq OTel.API.Baggage.Core.Builder.Errors.BaggageKeyIsEmptyError
instance GHC.Show.Show OTel.API.Baggage.Core.Builder.Errors.BaggageKeyContainsInvalidCharsError
instance GHC.Classes.Eq OTel.API.Baggage.Core.Builder.Errors.BaggageKeyContainsInvalidCharsError
instance GHC.Show.Show OTel.API.Baggage.Core.Builder.Errors.BaggageValueIsEmptyError
instance GHC.Classes.Eq OTel.API.Baggage.Core.Builder.Errors.BaggageValueIsEmptyError
instance GHC.Show.Show OTel.API.Baggage.Core.Builder.Errors.BaggageValueContainsInvalidCharsError
instance GHC.Classes.Eq OTel.API.Baggage.Core.Builder.Errors.BaggageValueContainsInvalidCharsError
instance GHC.Show.Show OTel.API.Baggage.Core.Builder.Errors.BaggageError
instance GHC.Classes.Eq OTel.API.Baggage.Core.Builder.Errors.BaggageError
instance GHC.Exception.Type.Exception OTel.API.Baggage.Core.Builder.Errors.BaggageErrors
instance GHC.Show.Show OTel.API.Baggage.Core.Builder.Errors.BaggageErrors
instance GHC.Classes.Eq OTel.API.Baggage.Core.Builder.Errors.BaggageErrors

module OTel.API.Baggage.Core.Internal
class (Monad m) => MonadBaggage m
getBaggage :: MonadBaggage m => m Baggage
setBaggage :: MonadBaggage m => Baggage -> m a -> m a
getBaggage :: (MonadBaggage m, MonadTrans t, MonadBaggage n, m ~ t n) => m Baggage
setBaggage :: (MonadBaggage m, MonadTransControl t, MonadBaggage n, m ~ t n) => Baggage -> m a -> m a
newtype Baggage
Baggage :: HashMap Text Text -> Baggage
[unBaggage] :: Baggage -> HashMap Text Text
nullBaggage :: Baggage -> Bool
sizeBaggage :: Baggage -> Int
memberBaggage :: Key Text -> Baggage -> Bool
lookupBaggage :: Key Text -> Baggage -> Maybe Text
findWithDefaultBaggage :: Text -> Key Text -> Baggage -> Text
deleteBaggage :: Key Text -> Baggage -> Baggage
filterBaggage :: (Text -> Bool) -> Baggage -> Baggage
filterWithKeyBaggage :: (Key Text -> Text -> Bool) -> Baggage -> Baggage
foldMapWithKeyBaggage :: forall m. Monoid m => (Key Text -> Text -> m) -> Baggage -> m
toListBaggage :: Baggage -> [(Key Text, Text)]
newtype BaggageBuilder a
BaggageBuilder :: Either (DList BaggageError) a -> BaggageBuilder a
[unBaggageBuilder] :: BaggageBuilder a -> Either (DList BaggageError) a
buildBaggage :: forall m. MonadThrow m => BaggageBuilder Baggage -> m Baggage
buildBaggagePure :: BaggageBuilder Baggage -> Either BaggageErrors Baggage
contextBackendBaggage :: ContextBackend Baggage
contextKeyBaggage :: ContextKey Baggage
isRFC7230TokenChar :: Char -> Bool
isRFC7230VCHARChar :: Char -> Bool
instance GHC.Base.Monoid OTel.API.Baggage.Core.Internal.Baggage
instance GHC.Base.Semigroup OTel.API.Baggage.Core.Internal.Baggage
instance GHC.Show.Show OTel.API.Baggage.Core.Internal.Baggage
instance GHC.Classes.Eq OTel.API.Baggage.Core.Internal.Baggage
instance GHC.Base.Monoid a => GHC.Base.Monoid (OTel.API.Baggage.Core.Internal.BaggageBuilder a)
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (OTel.API.Baggage.Core.Internal.BaggageBuilder a)
instance GHC.Base.Functor OTel.API.Baggage.Core.Internal.BaggageBuilder
instance GHC.Base.Applicative OTel.API.Baggage.Core.Internal.BaggageBuilder
instance OTel.API.Common.Internal.KV (OTel.API.Baggage.Core.Internal.BaggageBuilder OTel.API.Baggage.Core.Internal.Baggage)
instance OTel.API.Baggage.Core.Internal.MonadBaggage m => OTel.API.Baggage.Core.Internal.MonadBaggage (Control.Monad.Trans.Except.ExceptT e m)
instance OTel.API.Baggage.Core.Internal.MonadBaggage m => OTel.API.Baggage.Core.Internal.MonadBaggage (Control.Monad.Trans.Identity.IdentityT m)
instance OTel.API.Baggage.Core.Internal.MonadBaggage m => OTel.API.Baggage.Core.Internal.MonadBaggage (Control.Monad.Trans.Maybe.MaybeT m)
instance OTel.API.Baggage.Core.Internal.MonadBaggage m => OTel.API.Baggage.Core.Internal.MonadBaggage (Control.Monad.Trans.Reader.ReaderT r m)
instance OTel.API.Baggage.Core.Internal.MonadBaggage m => OTel.API.Baggage.Core.Internal.MonadBaggage (Control.Monad.Trans.State.Lazy.StateT r m)
instance OTel.API.Baggage.Core.Internal.MonadBaggage m => OTel.API.Baggage.Core.Internal.MonadBaggage (Control.Monad.Trans.State.Strict.StateT r m)
instance (OTel.API.Baggage.Core.Internal.MonadBaggage m, GHC.Base.Monoid w) => OTel.API.Baggage.Core.Internal.MonadBaggage (Control.Monad.Trans.RWS.Lazy.RWST r w s m)
instance (OTel.API.Baggage.Core.Internal.MonadBaggage m, GHC.Base.Monoid w) => OTel.API.Baggage.Core.Internal.MonadBaggage (Control.Monad.Trans.RWS.Strict.RWST r w s m)
instance (OTel.API.Baggage.Core.Internal.MonadBaggage m, GHC.Base.Monoid w) => OTel.API.Baggage.Core.Internal.MonadBaggage (Control.Monad.Trans.Writer.Lazy.WriterT w m)
instance (OTel.API.Baggage.Core.Internal.MonadBaggage m, GHC.Base.Monoid w) => OTel.API.Baggage.Core.Internal.MonadBaggage (Control.Monad.Trans.Writer.Strict.WriterT w m)
instance OTel.API.Baggage.Core.Internal.MonadBaggage m => OTel.API.Baggage.Core.Internal.MonadBaggage (Control.Monad.Logger.LoggingT m)
instance (OTel.API.Baggage.Core.Internal.MonadBaggage m, Control.Monad.IO.Unlift.MonadUnliftIO m) => OTel.API.Baggage.Core.Internal.MonadBaggage (Control.Monad.Trans.Resource.Internal.ResourceT m)

module OTel.API.Baggage.Core.Context
contextBackendBaggage :: ContextBackend Baggage
contextKeyBaggage :: ContextKey Baggage

module OTel.API.Baggage.Core.Class
class (Monad m) => MonadBaggage m
getBaggage :: MonadBaggage m => m Baggage
setBaggage :: MonadBaggage m => Baggage -> m a -> m a
getBaggage :: (MonadBaggage m, MonadTrans t, MonadBaggage n, m ~ t n) => m Baggage
setBaggage :: (MonadBaggage m, MonadTransControl t, MonadBaggage n, m ~ t n) => Baggage -> m a -> m a

module OTel.API.Baggage.Core.Builder
data BaggageBuilder a
buildBaggage :: forall m. MonadThrow m => BaggageBuilder Baggage -> m Baggage
buildBaggagePure :: BaggageBuilder Baggage -> Either BaggageErrors Baggage
(.@) :: (KV kv, KVConstraints kv from to) => Key to -> from -> kv
infixr 8 .@

module OTel.API.Baggage.Core
data Baggage
nullBaggage :: Baggage -> Bool
sizeBaggage :: Baggage -> Int
memberBaggage :: Key Text -> Baggage -> Bool
lookupBaggage :: Key Text -> Baggage -> Maybe Text
findWithDefaultBaggage :: Text -> Key Text -> Baggage -> Text
deleteBaggage :: Key Text -> Baggage -> Baggage
filterBaggage :: (Text -> Bool) -> Baggage -> Baggage
filterWithKeyBaggage :: (Key Text -> Text -> Bool) -> Baggage -> Baggage
foldMapWithKeyBaggage :: forall m. Monoid m => (Key Text -> Text -> m) -> Baggage -> m
toListBaggage :: Baggage -> [(Key Text, Text)]
