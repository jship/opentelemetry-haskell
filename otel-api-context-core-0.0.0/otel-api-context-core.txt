-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | STUB
--   
--   <tt>otel-api-context-core</tt> STUB
@package otel-api-context-core
@version 0.0.0

module OTel.API.Context.Core.Internal
newtype Context
Context :: Vault -> Context
[unContext] :: Context -> Vault
emptyContext :: Context
lookupContext :: ContextKey a -> Context -> Maybe a
insertContext :: ContextKey a -> a -> Context -> Context
data ContextKey a
ContextKey :: Text -> Key a -> ContextKey a
[contextKeyDebugName] :: ContextKey a -> Text
[contextKeyVaultKey] :: ContextKey a -> Key a
contextKeyName :: ContextKey a -> Text
unsafeNewContextKey :: forall m a. MonadIO m => Text -> m (ContextKey a)
attachContextValueUsing :: forall m a b. (MonadIO m, MonadMask m) => ContextBackend a -> a -> m b -> m b
getAttachedContextValueUsing :: forall m a. (MonadIO m, MonadThrow m) => ContextBackend a -> m (Maybe a)
getAttachedContextUsing :: forall m a. (MonadIO m, MonadThrow m) => ContextBackend a -> m Context
data ContextBackend a
ContextBackend :: Store Context -> ContextKey a -> ContextBackendRegistry -> ContextBackend a
[contextBackendStore] :: ContextBackend a -> Store Context
[contextBackendValueKey] :: ContextBackend a -> ContextKey a
[contextBackendRegistry] :: ContextBackend a -> ContextBackendRegistry
unsafeNewContextBackend :: forall m a. (MonadIO m, Typeable a) => m (ContextBackend a)
data SomeContextBackend
[SomeContextBackend] :: ContextBackend a -> SomeContextBackend
newtype ContextBackendRegistry
ContextBackendRegistry :: IORef (HashMap Unique SomeContextBackend) -> ContextBackendRegistry
[unContextBackendRegistry] :: ContextBackendRegistry -> IORef (HashMap Unique SomeContextBackend)
emptyContextBackendRegistry :: IO ContextBackendRegistry
registerContextBackend :: Unique -> ContextBackend a -> ContextBackendRegistry -> IO ()
defaultContextBackendRegistry :: ContextBackendRegistry

module OTel.API.Context.Core
data Context
emptyContext :: Context
lookupContext :: ContextKey a -> Context -> Maybe a
insertContext :: ContextKey a -> a -> Context -> Context
data ContextKey a
contextKeyName :: ContextKey a -> Text
attachContextValueUsing :: forall m a b. (MonadIO m, MonadMask m) => ContextBackend a -> a -> m b -> m b
getAttachedContextValueUsing :: forall m a. (MonadIO m, MonadThrow m) => ContextBackend a -> m (Maybe a)
getAttachedContextUsing :: forall m a. (MonadIO m, MonadThrow m) => ContextBackend a -> m Context
data ContextBackend a
